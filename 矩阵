abstract class GenericMatrix{

    //将矩阵元素相加的抽象方法;

    protected abstract E add(E o1, E o2);

    //将矩阵的两个元素相乘的抽象方法

    protected abstract E multiply(E o1, E o2);

    //定义零矩阵的抽象方法

    protected abstract E zero();

 

    //将两个矩阵相加,用泛型E来表示类，所以方法是非静态的；

    public E[][] addMatrix(E[][] matrix1, E[][] matrix2){

 

        E[][] result = (E[][])new Number[matrix1.length][matrix1[0].length];

        //注意E[][] result = new Number[matrix.length][matrix1[0].length]是不对的，

        //因为不能用泛型类型来创建数组，要用（E[][]）来转换才能创建数组；

        //检查矩阵matrix1和矩阵matrix2的大小是否相等,matrix1.length为行数，matrix1[0].length为列数

        if ((matrix1.length != matrix2.length) || (matrix1[0].length != matrix2[0].length)){

            throw new RuntimeException("The matrices do not have the same size!");

        }else{for(int i=0; i中的;

class IntegerMatrix extends GenericMatrix{

    //实现GenericMatrix中的add抽象方法

    protected Integer add(Integer o1, Integer o2 ){

        return o1+o2;

    }

    //实现GenericMatrix中的mltiply抽象方法

    protected Integer multiply(Integer o1, Integer o2){

        return o1*o2;

    }

    //实现GenericMatrix中的zero抽象方法

    protected Integer zero(){

        return 0;

    }

 

}

 

//Double类类继承了GenericMatrix<？extends Number>中的;

class DoubleMatrix extends  GenericMatrix{

    //实现GenericMatrix中的三个抽象方法；

    protected Double add(Double d1,Double d2){

        return d1+d2;

    }

    protected Double multiply(Double d1,Double d2){

        return d1*d2;

    }

    protected Double zero(){

        return 0.0;

    }

 

}

 

public class testGenericMatrix{

    public static void main(String[] args){

        //创建Integer数组

        Integer[][] m1 = new Integer[][]{{1,2,3},{4,5,6},{1,1,1}};

        Integer[][] m2 = new Integer[][]{{1,1,1},{2,2,2},{0,0,0}};

        //创建IntegerMatrix实例；

        IntegerMatrix integerMatrix = new IntegerMatrix();

 

        System.out.println("m1+m2 is ");

        GenericMatrix.printResult(m1,m2,integerMatrix.addMatrix(m1,m2),'+');

 

        System.out.println("m1*m2 is ");

        GenericMatrix.printResult(m1,m2,integerMatrix.multiplyMatrix(m1,m2),'*');

        //创建Double数组

        Double[][] d1 = new Double[][]{{1.1, 1.2, 1.3}, {2.1, 2.1, 2.1}, {3.1, 3.1, 3.1}};

        Double[][] d2 = new Double[][]{{1.1, 2.1, 3.1}, {2.1, 2.1, 2.1}, {3.1, 3.1, 3.1}};

 

        DoubleMatrix doubleMatrix = new DoubleMatrix();

 

 

        System.out.println("d1+d2 is ");

        GenericMatrix.printResult(d1,d2,doubleMatrix.addMatrix(d1,d2),'+');

 

        System.out.println("d1*d2 is ");

        GenericMatrix.printResult(d1,d2,doubleMatrix.multiplyMatrix(d1,d2),'*');

 

    }

 }
